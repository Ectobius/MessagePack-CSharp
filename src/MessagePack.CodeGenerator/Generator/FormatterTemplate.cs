// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MessagePack.CodeGenerator.Generator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class FormatterTemplate : FormatterTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("#pragma warning disable 618\r\n#pragma warning disable 612\r\n#pragma warning disable" +
                    " 414\r\n#pragma warning disable 168\r\n\r\nnamespace ");
            
            #line 11 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(@"
{
    using System;
    using System.Collections.Generic;
    using MessagePack;
    using MessagePack.Formatters;

    internal class TypeRegistry
    {
        public static Dictionary<int, Type> Types { get; } = new Dictionary<int, Type>
        {
");
            
            #line 22 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 foreach(var objInfo in objectSerializationInfos) { 
            
            #line default
            #line hidden
            this.Write("            { ");
            
            #line 23 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.TypeId));
            
            #line default
            #line hidden
            this.Write(", typeof(");
            
            #line 23 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(") },\r\n");
            
            #line 24 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        };\r\n    }\r\n\r\n");
            
            #line 28 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 foreach(var objInfo in objectSerializationInfos) { 
            
            #line default
            #line hidden
            this.Write("\r\n    public sealed class ");
            
            #line 30 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.Name));
            
            #line default
            #line hidden
            this.Write("Formatter : global::MessagePack.Formatters.IMessagePackFormatterWithPopulate<");
            
            #line 30 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(">, IMessagePackUntypedFormatterWithPopulate, IMessagePackUntypedFormatter\r\n    {\r" +
                    "\n        private const int TypeId = ");
            
            #line 32 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.TypeId));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n        private global::MessagePack.ModelCreation.IModelFactory _modelFactor" +
                    "y;\r\n\r\n");
            
            #line 36 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if( objInfo.IsStringKey) { 
            
            #line default
            #line hidden
            this.Write("\r\n        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping" +
                    ";\r\n        readonly byte[][] ____stringByteKeys;\r\n        \r\n\r\n        public ");
            
            #line 42 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.Name));
            
            #line default
            #line hidden
            this.Write("Formatter(global::MessagePack.ModelCreation.IModelFactory modelFactory)\r\n        " +
                    "{\r\n            this.____keyMapping = new global::MessagePack.Internal.AutomataDi" +
                    "ctionary()\r\n            {\r\n");
            
            #line 46 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 foreach(var x in objInfo.Members) { 
            
            #line default
            #line hidden
            this.Write("                { \"");
            
            #line 47 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.StringKey));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 47 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.IntKey));
            
            #line default
            #line hidden
            this.Write("},\r\n");
            
            #line 48 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            };\r\n\r\n            this.____stringByteKeys = new byte[][]\r\n           " +
                    " {\r\n");
            
            #line 53 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 foreach(var x in objInfo.Members.Where(x => x.IsReadable)) { 
            
            #line default
            #line hidden
            this.Write("                global::MessagePack.MessagePackBinary.GetEncodedStringBytes(\"");
            
            #line 54 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.StringKey));
            
            #line default
            #line hidden
            this.Write("\"),\r\n");
            
            #line 55 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                \r\n            };\r\n\r\n            this._modelFactory = modelFactory" +
                    ";\r\n        }\r\n\r\n");
            
            #line 61 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
  } else { 
            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 62 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.Name));
            
            #line default
            #line hidden
            this.Write("Formatter(global::MessagePack.ModelCreation.IModelFactory modelFactory)\r\n        " +
                    "{\r\n            this._modelFactory = modelFactory;\r\n        }\r\n");
            
            #line 66 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n        public int Serialize(ref byte[] bytes, int offset, ");
            
            #line 68 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(" value, global::MessagePack.IFormatterResolver formatterResolver, SerializationCo" +
                    "ntext context)\r\n        {\r\n");
            
            #line 70 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if( objInfo.IsClass) { 
            
            #line default
            #line hidden
            this.Write("            if (value == null)\r\n            {\r\n                return global::Mes" +
                    "sagePack.MessagePackBinary.WriteNil(ref bytes, offset);\r\n            }          " +
                    "  \r\n");
            
            #line 75 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"
            var startOffset = offset;

            if (context.CheckIfExternal(value))
            {
                var externalObjectId = context.PutToExternalObjects(value);
                offset += global::MessagePack.MessagePackBinary.WriteFixedArrayHeaderUnsafe(ref bytes, offset, 2);
                offset += global::MessagePack.MessagePackBinary.WriteInt32(ref bytes, offset, (int)global::MessagePack.ModelSerialization.ReservedTypes.ExternalReference);
                offset += global::MessagePack.MessagePackBinary.WriteInt32(ref bytes, offset, externalObjectId);
                return offset - startOffset;
            }

");
            
            #line 88 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if (objInfo.DontSerialize) { 
            
            #line default
            #line hidden
            this.Write("\r\n            offset += global::MessagePack.MessagePackBinary.WriteNil(ref bytes," +
                    " offset);\r\n            return offset - startOffset;\r\n\r\n");
            
            #line 93 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("            if (value.GetType() != typeof(");
            
            #line 94 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(@"))
            {
                if (formatterResolver is IUntypedFormatterResolver untypedFormatterResolver)
                {
                    var derivedTypeFormatter = untypedFormatterResolver.GetFormatter(value.GetType());
                    return derivedTypeFormatter.Serialize(ref bytes, offset, value, formatterResolver, context);
                }
            }

");
            
            #line 103 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if(objInfo.HasIMessagePackSerializationCallbackReceiver && objInfo.NeedsCastOnBefore) { 
            
            #line default
            #line hidden
            this.Write("            ((IMessagePackSerializationCallbackReceiver)value).OnBeforeSerialize(" +
                    ");\r\n");
            
            #line 105 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else if(objInfo.HasIMessagePackSerializationCallbackReceiver) { 
            
            #line default
            #line hidden
            this.Write("            value.OnBeforeSerialize();\r\n");
            
            #line 107 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"
            if (context != null && context.SerializedObjects.ContainsKey(value))
            {
                offset += global::MessagePack.MessagePackBinary.WriteFixedArrayHeaderUnsafe(ref bytes, offset, 2);
                offset += global::MessagePack.MessagePackBinary.WriteInt32(ref bytes, offset, (int) global::MessagePack.ModelSerialization.ReservedTypes.Reference);
                offset += global::MessagePack.MessagePackBinary.WriteInt32(ref bytes, offset, context.SerializedObjects[value]);
                return offset - startOffset;
            }

            int objectId = context.PutToSerialized(value);

");
            
            #line 119 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 int numberOfFields = objInfo.MaxKey + 3; 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 121 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if( objInfo.IsIntKey) { if( (numberOfFields) <= 15) { 
            
            #line default
            #line hidden
            this.Write("            offset += global::MessagePack.MessagePackBinary.WriteFixedArrayHeader" +
                    "Unsafe(ref bytes, offset, ");
            
            #line 122 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(numberOfFields));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 123 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("            offset += global::MessagePack.MessagePackBinary.WriteArrayHeader(ref " +
                    "bytes, offset, ");
            
            #line 124 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(numberOfFields));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 125 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } } else if( objInfo.WriteCount <= 15) { 
            
            #line default
            #line hidden
            this.Write("            offset += global::MessagePack.MessagePackBinary.WriteFixedMapHeaderUn" +
                    "safe(ref bytes, offset, ");
            
            #line 126 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.WriteCount));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 127 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("            offset += global::MessagePack.MessagePackBinary.WriteMapHeader(ref by" +
                    "tes, offset, ");
            
            #line 128 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.WriteCount));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 129 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 130 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if(objInfo.IsIntKey) { 
            
            #line default
            #line hidden
            this.Write("\r\n            offset += global::MessagePack.MessagePackBinary.WriteInt32(ref byte" +
                    "s, offset, TypeId);\r\n            offset += global::MessagePack.MessagePackBinary" +
                    ".WriteInt32(ref bytes, offset, objectId);\r\n\r\n");
            
            #line 135 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 for(var i = 0; i <= objInfo.MaxKey; i++) { var member = objInfo.GetMember(i); 
            
            #line default
            #line hidden
            
            #line 136 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if( member == null) { 
            
            #line default
            #line hidden
            this.Write("            offset += global::MessagePack.MessagePackBinary.WriteNil(ref bytes, o" +
                    "ffset);\r\n");
            
            #line 138 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("            offset += ");
            
            #line 139 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.GetSerializeMethodString()));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 140 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } } } else { 
            
            #line default
            #line hidden
            
            #line 141 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 var index = 0; foreach(var x in objInfo.Members) { 
            
            #line default
            #line hidden
            this.Write("            offset += global::MessagePack.MessagePackBinary.WriteRaw(ref bytes, o" +
                    "ffset, this.____stringByteKeys[");
            
            #line 142 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index++));
            
            #line default
            #line hidden
            this.Write("]);\r\n            offset += ");
            
            #line 143 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.GetSerializeMethodString()));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 144 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } } 
            
            #line default
            #line hidden
            this.Write("            return offset - startOffset;\r\n");
            
            #line 146 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        public ");
            
            #line 149 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(" Deserialize(byte[] bytes, int offset, global::MessagePack.IFormatterResolver for" +
                    "matterResolver, out int readSize, DeserializationContext context)\r\n        {\r\n  " +
                    "          if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))\r\n     " +
                    "       {\r\n");
            
            #line 153 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if( objInfo.IsClass) { 
            
            #line default
            #line hidden
            this.Write("                readSize = 1;\r\n                return null;\r\n");
            
            #line 156 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("                throw new InvalidOperationException(\"typecode is null, struct not" +
                    " supported\");\r\n");
            
            #line 158 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            }\r\n\r\n            var startOffset = offset;\r\n");
            
            #line 162 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if(objInfo.IsStringKey) { 
            
            #line default
            #line hidden
            this.Write("            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(byte" +
                    "s, offset, out readSize);\r\n");
            
            #line 164 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("            var length = global::MessagePack.MessagePackBinary.ReadArrayHeader(by" +
                    "tes, offset, out readSize);\r\n");
            
            #line 166 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"            offset += readSize;

            var writtedTypeId = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
            offset += readSize;

            if (writtedTypeId == (int) global::MessagePack.ModelSerialization.ReservedTypes.ExternalReference)
            {
                var referencedObjectId = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                offset += readSize;
                readSize = offset - startOffset;

                if (context.ExternalObjectsByIds != null && context.ExternalObjectsByIds.ContainsKey(referencedObjectId))
                {
                    return (");
            
            #line 180 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(@") context.ExternalObjectsByIds[referencedObjectId];
                }

                return null;
            }

            if (writtedTypeId == (int) global::MessagePack.ModelSerialization.ReservedTypes.Reference)
            {
                var referencedObjectId = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                offset += readSize;
                readSize = offset - startOffset;
                
                if (context.DeserializedObjects.ContainsKey(referencedObjectId))
                {
                    return (");
            
            #line 194 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(@") context.DeserializedObjects[referencedObjectId];
                }
                return null;
            }

            if (writtedTypeId != TypeId)
            {
                var actualType = TypeRegistry.Types[writtedTypeId];
                if (!(formatterResolver is IUntypedFormatterResolver))
                {
                    throw new Exception(""In order to deserialize derived types resolver should implement IUntypedFormatterResolver"");
                }

                var untypedFormatterResolver = formatterResolver as IUntypedFormatterResolver;
                var formatter = untypedFormatterResolver.GetFormatter(actualType);

                offset = startOffset;
                return (");
            
            #line 211 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(") formatter.Deserialize(bytes, offset, formatterResolver, out readSize, context);" +
                    "\r\n            }\r\n\r\n            var objectId = MessagePackBinary.ReadInt32(bytes," +
                    " offset, out readSize);\r\n            offset += readSize;\r\n\r\n");
            
            #line 217 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 foreach(var x in objInfo.Members) { 
            
            #line default
            #line hidden
            this.Write("            var __");
            
            #line 218 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write("__ = default(");
            
            #line 218 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.TypeName));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 219 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            for (int i = 0; i < length - 2; i++)\r\n            {\r\n");
            
            #line 223 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if(objInfo.IsStringKey) { 
            
            #line default
            #line hidden
            this.Write(@"                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }
");
            
            #line 232 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("                var key = i;\r\n");
            
            #line 234 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n                switch (key)\r\n                {\r\n");
            
            #line 238 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 foreach(var x in objInfo.Members) { 
            
            #line default
            #line hidden
            this.Write("                    case ");
            
            #line 239 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.IntKey));
            
            #line default
            #line hidden
            this.Write(":\r\n                        __");
            
            #line 240 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write("__ = ");
            
            #line 240 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.GetDeserializeMethodString()));
            
            #line default
            #line hidden
            this.Write(";\r\n                        break;\r\n");
            
            #line 242 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                    default:\r\n                        readSize = global::MessageP" +
                    "ack.MessagePackBinary.ReadNextBlock(bytes, offset);\r\n                        bre" +
                    "ak;\r\n                }\r\n");
            
            #line 247 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if(objInfo.IsStringKey) { 
            
            #line default
            #line hidden
            this.Write("                \r\n                NEXT_LOOP:\r\n");
            
            #line 249 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                offset += readSize;\r\n            }\r\n\r\n            readSize = offs" +
                    "et - startOffset;\r\n\r\n");
            
            #line 255 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if (objInfo.DontSerialize) { 
            
            #line default
            #line hidden
            this.Write("            \r\n            return null;\r\n\r\n");
            
            #line 259 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n            var ____result = _modelFactory.CreateModel<");
            
            #line 261 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(">(); //new ");
            
            #line 261 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.GetConstructorString()));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 262 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 foreach(var x in objInfo.Members.Where(x => x.IsWritable)) { 
            
            #line default
            #line hidden
            this.Write("            ____result.");
            
            #line 263 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write(" = __");
            
            #line 263 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write("__;\r\n");
            
            #line 264 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 265 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
if(objInfo.HasIMessagePackSerializationCallbackReceiver && objInfo.NeedsCastOnAfter) { 
            
            #line default
            #line hidden
            this.Write("            ((IMessagePackSerializationCallbackReceiver)____result).OnAfterDeseri" +
                    "alize();\r\n");
            
            #line 267 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else if(objInfo.HasIMessagePackSerializationCallbackReceiver) { 
            
            #line default
            #line hidden
            this.Write("            ____result.OnAfterDeserialize();\r\n");
            
            #line 269 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            context.DeserializedObjects[objectId] = ____result;\r\n\r\n            " +
                    "return ____result;\r\n\r\n");
            
            #line 275 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        public int Serialize(ref byte[] bytes, int offset, object va" +
                    "lue, IFormatterResolver formatterResolver, SerializationContext context)\r\n      " +
                    "  {\r\n            return Serialize(ref bytes, offset, (");
            
            #line 280 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(@") value, formatterResolver, context);
        }

        object IMessagePackFormatter<object>.Deserialize(byte[] bytes, int offset, IFormatterResolver formatterResolver, out int readSize, DeserializationContext context)
        {
            return Deserialize(bytes, offset, formatterResolver, out readSize, context);
        }

        public void Populate(ref ");
            
            #line 288 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(" value, byte[] bytes, int offset, global::MessagePack.IFormatterResolver formatte" +
                    "rResolver, out int readSize, DeserializationContext context)\r\n        {\r\n       " +
                    "     if (global::MessagePack.MessagePackBinary.IsNil(bytes, offset))\r\n          " +
                    "  {\r\n");
            
            #line 292 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if( objInfo.IsClass) { 
            
            #line default
            #line hidden
            this.Write("                readSize = 1;\r\n                value = null;\r\n                ret" +
                    "urn;\r\n");
            
            #line 296 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("                throw new InvalidOperationException(\"typecode is null, struct not" +
                    " supported\");\r\n");
            
            #line 298 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            }\r\n\r\n            var startOffset = offset;\r\n");
            
            #line 302 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if(objInfo.IsStringKey) { 
            
            #line default
            #line hidden
            this.Write("            var length = global::MessagePack.MessagePackBinary.ReadMapHeader(byte" +
                    "s, offset, out readSize);\r\n");
            
            #line 304 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("            var length = global::MessagePack.MessagePackBinary.ReadArrayHeader(by" +
                    "tes, offset, out readSize);\r\n");
            
            #line 306 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"            offset += readSize;

            var writtedTypeId = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
            offset += readSize;

            if (writtedTypeId == (int) global::MessagePack.ModelSerialization.ReservedTypes.ExternalReference)
            {
                var referencedObjectId = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                offset += readSize;
                readSize = offset - startOffset;

                if (context.ExternalObjectsByIds != null && context.ExternalObjectsByIds.ContainsKey(referencedObjectId))
                {
                    value = (");
            
            #line 320 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(@") context.ExternalObjectsByIds[referencedObjectId];
                    return;
                }

                value = null;
                return;
            }

            if (writtedTypeId == (int) global::MessagePack.ModelSerialization.ReservedTypes.Reference)
            {
                var referencedObjectId = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
                offset += readSize;
                readSize = offset - startOffset;
                
                if (context.DeserializedObjects.ContainsKey(referencedObjectId))
                {
                    value = (");
            
            #line 336 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(@") context.DeserializedObjects[referencedObjectId];
                    return;
                }
                value = null;
                return;
            }

            var actualType = TypeRegistry.Types[writtedTypeId];

            if (writtedTypeId != TypeId)
            {
                var formatter = GetFormatterForActualType(actualType, formatterResolver);
                var formatterWithPopulate = (IMessagePackUntypedFormatterWithPopulate) formatter;

                var valueObject = (object)value;
                offset = startOffset;
                formatterWithPopulate.Populate(ref valueObject, bytes, offset, formatterResolver, out readSize, context);
                return;
            }

            if (actualType != value.GetType() && actualType.IsSubclassOf(value.GetType()))
            {
                var formatter = GetFormatterForActualType(actualType, formatterResolver);
                offset = startOffset;
                value = (");
            
            #line 360 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(@") formatter.Deserialize(bytes, offset, formatterResolver, out readSize, context);
                return;
            }

            var objectId = MessagePackBinary.ReadInt32(bytes, offset, out readSize);
            offset += readSize;

            for (int i = 0; i < length - 2; i++)
            {
");
            
            #line 369 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if(objInfo.IsStringKey) { 
            
            #line default
            #line hidden
            this.Write(@"                var stringKey = global::MessagePack.MessagePackBinary.ReadStringSegment(bytes, offset, out readSize);
                offset += readSize;
                int key;
                if (!____keyMapping.TryGetValueSafe(stringKey, out key))
                {
                    readSize = global::MessagePack.MessagePackBinary.ReadNextBlock(bytes, offset);
                    goto NEXT_LOOP;
                }
");
            
            #line 378 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("                var key = i;\r\n");
            
            #line 380 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n                switch (key)\r\n                {\r\n");
            
            #line 384 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 foreach(var x in objInfo.Members) { 
            
            #line default
            #line hidden
            this.Write("                    case ");
            
            #line 385 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.IntKey));
            
            #line default
            #line hidden
            this.Write(":\r\n");
            
            #line 386 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if (x.IsPrimitive()) { 
            
            #line default
            #line hidden
            this.Write("                        value.");
            
            #line 387 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 387 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.GetDeserializeMethodString()));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 388 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else if (MessagePack.Resolvers.BuiltinResolver.TypeHasBuiltinFormatter(x.Type)) { 
            
            #line default
            #line hidden
            this.Write("                        value.");
            
            #line 389 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 389 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.GetDeserializeMethodString()));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 390 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("                        var formatter");
            
            #line 391 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write(" = formatterResolver.GetFormatterWithVerify<");
            
            #line 391 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.TypeName));
            
            #line default
            #line hidden
            this.Write(">();\r\n                        if (value.");
            
            #line 392 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write(" != null && formatter");
            
            #line 392 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write(" is IMessagePackFormatterWithPopulate<");
            
            #line 392 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.TypeName));
            
            #line default
            #line hidden
            this.Write("> formatterWithPopulate");
            
            #line 392 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write(")\r\n                        {\r\n                            var __");
            
            #line 394 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write("__ = value.");
            
            #line 394 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n                            formatterWithPopulate");
            
            #line 395 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write(".Populate(ref __");
            
            #line 395 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write("__, bytes, offset, formatterResolver, out readSize, context);\r\n                  " +
                    "          if (__");
            
            #line 396 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write("__ != value.");
            
            #line 396 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write(") {\r\n                                value.");
            
            #line 397 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write(" = __");
            
            #line 397 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write("__;\r\n                            }\r\n                        }\r\n                  " +
                    "      else\r\n                        {\r\n                            value.");
            
            #line 402 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 402 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x.GetDeserializeMethodString()));
            
            #line default
            #line hidden
            this.Write(";\r\n                        }\r\n");
            
            #line 404 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                        break;\r\n");
            
            #line 406 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                    default:\r\n                        readSize = global::MessageP" +
                    "ack.MessagePackBinary.ReadNextBlock(bytes, offset);\r\n                        bre" +
                    "ak;\r\n                }\r\n");
            
            #line 411 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 if(objInfo.IsStringKey) { 
            
            #line default
            #line hidden
            this.Write("                \r\n                NEXT_LOOP:\r\n");
            
            #line 413 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"                offset += readSize;
            }

            context.DeserializedObjects[objectId] = value;

            readSize = offset - startOffset;
        }

        IMessagePackUntypedFormatter GetFormatterForActualType(Type actualType, IFormatterResolver formatterResolver)
        {
            if (!(formatterResolver is IUntypedFormatterResolver))
            {
                throw new Exception(""In order to populate derived types resolver should implement IUntypedFormatterResolver"");
            }

            var untypedFormatterResolver = (IUntypedFormatterResolver) formatterResolver;
            return untypedFormatterResolver.GetFormatter(actualType);
        }

        void IMessagePackFormatterWithPopulate<object>.Populate(ref object value, byte[] bytes, int offset, IFormatterResolver formatterResolver, out int readSize, DeserializationContext context)
        {
            var typedValue = (");
            
            #line 435 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objInfo.FullName));
            
            #line default
            #line hidden
            this.Write(") value;\r\n            Populate(ref typedValue, bytes, offset, formatterResolver, " +
                    "out readSize, context);\r\n        }\r\n    }\r\n\r\n");
            
            #line 440 "C:\programming\work\MessagePack-CSharp\src\MessagePack.CodeGenerator\Generator\FormatterTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("}\r\n\r\n#pragma warning restore 168\r\n#pragma warning restore 414\r\n#pragma warning re" +
                    "store 618\r\n#pragma warning restore 612");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class FormatterTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
